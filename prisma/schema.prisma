// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int     @id @default(autoincrement())
  username          String  @unique
  email             String  @unique
  password          String
  profilePictureUrl String?
  teamId            Int?
  otp               String?
  otpExpires        DateTime?
  provider          String?
  providerAccountId String?
  image             String?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt

  authoredTasks    Task[]           @relation("TaskAuthor")
  assignedTasks    Task[]           @relation("TaskAssignee")
  taskAssignments  TaskAssignment[]
  attachments      Attachment[]
  comments         Comment[]
  team             Team?            @relation(fields: [teamId], references: [id])
  authoredProjects Project[]        @relation("ProjectAuthor")
  userProjects     ProjectTeam[]    @relation("UserProjects")

  ProjectTeam ProjectTeam[]
   @@unique([provider, providerAccountId])
}

model Project {
  id           Int           @id @default(autoincrement())
  authorUserId Int?
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  fileURL      String?
  fileName     String?
  tasks        Task[]
  userTeam     ProjectTeam[] @relation("UserProjects") // Relasi dengan ProjectTeam
  author       User?         @relation("ProjectAuthor", fields: [authorUserId], references: [userId])
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  userId    Int
  teamId    Int?
  projectId Int
  team      Team?   @relation(fields: [teamId], references: [id])
  project   Project @relation("UserProjects", fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [userId])
  User      User[]  @relation("UserProjects")

  @@unique([projectId, userId])
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   Int
  assignedUserId Int?
  filesUrl       String[]
  filesName      String[]

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}
